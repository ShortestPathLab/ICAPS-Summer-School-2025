from typing import Any, ClassVar, Iterable, Iterator, List, Tuple

from typing import overload
import datetime

class Action:
    __doc__: ClassVar[str] = ...  # read-only
    __members__: ClassVar[dict] = ...  # read-only
    CCR: ClassVar[Action] = ...
    CR: ClassVar[Action] = ...
    FW: ClassVar[Action] = ...
    W: ClassVar[Action] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class ActionModelWithRotate:
    def __init__(self, arg0: Grid) -> None: ...
    def result_states(self, *args, **kwargs) -> Any: ...
    def set_logger(self, arg0: Logger) -> None: ...

class Grid:
    def __init__(self, arg0: str) -> None: ...
    @property
    def cols(self) -> int: ...
    @property
    def map(self) -> Any: ...
    @property
    def map_name(self) -> str: ...
    @property
    def rows(self) -> int: ...

class ItemsView[MapTask]:
    def __init__(self, *args, **kwargs) -> None: ...
    def __iter__(self) -> Iterator: ...
    def __len__(self) -> int: ...

class KeysView[MapTask]:
    def __init__(self, *args, **kwargs) -> None: ...
    @overload
    def __contains__(self, arg0: int) -> bool: ...
    @overload
    def __contains__(self, arg0: object) -> bool: ...
    def __iter__(self) -> Iterator: ...
    def __len__(self) -> int: ...

class MapTask:
    def __init__(self) -> None: ...
    def items(self) -> ItemsView[MapTask]: ...
    def keys(self) -> KeysView[MapTask]: ...
    def values(self) -> ValuesView[MapTask]: ...
    def __bool__(self) -> bool: ...
    @overload
    def __contains__(self, arg0: int) -> bool: ...
    @overload
    def __contains__(self, arg0: object) -> bool: ...
    def __delitem__(self, arg0: int) -> None: ...
    def __getitem__(self, arg0: int) -> Task: ...
    def __iter__(self) -> Iterator: ...
    def __len__(self) -> int: ...
    def __setitem__(self, arg0: int, arg1: Task) -> None: ...

class SharedEnvironment:
    def __init__(self) -> None: ...
    def plan_current_time(self) -> datetime.timedelta: ...
    @property
    def cols(self) -> int: ...
    @property
    def curr_states(self) -> Any: ...
    @property
    def curr_task_schedule(self) -> Any: ...
    @property
    def curr_timestep(self) -> int: ...
    @property
    def file_storage_path(self) -> str: ...
    @property
    def goal_locations(self) -> Any: ...
    @property
    def map(self) -> Any: ...
    @property
    def map_name(self) -> str: ...
    @property
    def new_freeagents(self) -> Any: ...
    @property
    def new_tasks(self) -> Any: ...
    @property
    def num_of_agents(self) -> int: ...
    @property
    def plan_start_time(self) -> datetime.timedelta: ...
    @property
    def rows(self) -> int: ...
    @property
    def task_pool(self) -> Any: ...

class State:
    __hash__: ClassVar[None] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: int, arg1: int, arg2: int) -> None: ...
    def __eq__(self, arg0: State) -> bool: ...
    def __ne__(self, arg0: State) -> bool: ...
    @property
    def location(self) -> int: ...
    @property
    def orientation(self) -> int: ...
    @property
    def timestep(self) -> int: ...

class Task:
    agent_assigned: int
    def __init__(self, arg0: int, arg1: List[int], arg2: int) -> None: ...
    def get_next_loc(self) -> int: ...
    def is_finished(self) -> bool: ...
    @property
    def idx_next_loc(self) -> int: ...
    @property
    def locations(self) -> Any: ...
    @property
    def t_completed(self) -> int: ...
    @property
    def t_revealed(self) -> int: ...
    @property
    def task_id(self) -> int: ...

class ValuesView[MapTask]:
    def __init__(self, *args, **kwargs) -> None: ...
    def __iter__(self) -> Iterator: ...
    def __len__(self) -> int: ...

class VectorGoals:
    __hash__: ClassVar[None] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VectorGoals) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: List[Tuple[int,int]]) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: List[Tuple[int,int]]) -> int: ...
    @overload
    def extend(self, L: VectorGoals) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: List[Tuple[int,int]]) -> None: ...
    @overload
    def pop(self) -> List[Tuple[int,int]]: ...
    @overload
    def pop(self, i: int) -> List[Tuple[int,int]]: ...
    def remove(self, x: List[Tuple[int,int]]) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: List[Tuple[int,int]]) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VectorGoals) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VectorGoals: ...
    @overload
    def __getitem__(self, arg0: int) -> List[Tuple[int,int]]: ...
    def __iter__(self) -> Iterator: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VectorGoals) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: List[Tuple[int,int]]) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VectorGoals) -> None: ...

class VectorInt:
    __hash__: ClassVar[None] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VectorInt) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: int) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: int) -> int: ...
    @overload
    def extend(self, L: VectorInt) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: int) -> None: ...
    @overload
    def pop(self) -> int: ...
    @overload
    def pop(self, i: int) -> int: ...
    def remove(self, x: int) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: int) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VectorInt) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VectorInt: ...
    @overload
    def __getitem__(self, arg0: int) -> int: ...
    def __iter__(self) -> Iterator: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VectorInt) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: int) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VectorInt) -> None: ...

class VectorState:
    __hash__: ClassVar[None] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VectorState) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: State) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: State) -> int: ...
    @overload
    def extend(self, L: VectorState) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: State) -> None: ...
    @overload
    def pop(self) -> State: ...
    @overload
    def pop(self, i: int) -> State: ...
    def remove(self, x: State) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: State) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VectorState) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VectorState: ...
    @overload
    def __getitem__(self, arg0: int) -> State: ...
    def __iter__(self) -> Iterator: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VectorState) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: State) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VectorState) -> None: ...

class VectorTask:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VectorTask) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: Task) -> None: ...
    def clear(self) -> None: ...
    @overload
    def extend(self, L: VectorTask) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: Task) -> None: ...
    @overload
    def pop(self) -> Task: ...
    @overload
    def pop(self, i: int) -> Task: ...
    def __bool__(self) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    @overload
    def __getitem__(self, s: slice) -> VectorTask: ...
    @overload
    def __getitem__(self, arg0: int) -> Task: ...
    def __iter__(self) -> Iterator: ...
    def __len__(self) -> int: ...
    @overload
    def __setitem__(self, arg0: int, arg1: Task) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VectorTask) -> None: ...
